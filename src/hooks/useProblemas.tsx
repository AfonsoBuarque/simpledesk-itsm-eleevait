
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';
import type { Problema } from '@/types/problema';

export const useProblemas = () => {
  return useQuery({
    queryKey: ['problemas'],
    queryFn: async () => {
      console.log('Buscando problemas...');
      
      const { data, error } = await supabase
        .from('problemas')
        .select(`
          *,
          solicitante:solicitante_id(name),
          atendente:atendente_id(name),
          grupo_responsavel:grupo_responsavel_id(name),
          categoria:categoria_id(nome),
          sla:sla_id(nome)
        `)
        .order('criado_em', { ascending: false });

      if (error) {
        console.error('Erro ao buscar problemas:', error);
        throw error;
      }

      console.log('Problemas encontrados:', data?.length || 0);
      return data || [];
    },
  });
};

export const useProblemasMutations = () => {
  const queryClient = useQueryClient();

  const createProblema = useMutation({
    mutationFn: async (problema: Omit<Problema, 'id' | 'numero' | 'criado_em' | 'atualizado_em'>) => {
      console.log('Criando problema com dados:', problema);

      const { data: user } = await supabase.auth.getUser();
      if (!user.user?.id) {
        throw new Error('Usuário não autenticado');
      }

      const problemaData = {
        ...problema,
        solicitante_id: user.user.id,
        criado_por: user.user.id,
        atualizado_por: user.user.id,
      };

      const { data, error } = await supabase
        .from('problemas')
        .insert({
          ...problemaData,
          numero: '' // Will be auto-generated by trigger
        })
        .select()
        .single();

      if (error) {
        console.error('Erro ao criar problema:', error);
        throw error;
      }

      console.log('Problema criado com sucesso:', data);
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['problemas'] });
      toast.success('Problema criado com sucesso!');
    },
    onError: (error) => {
      console.error('Erro ao criar problema:', error);
      toast.error('Erro ao criar problema');
    },
  });

  const updateProblema = useMutation({
    mutationFn: async ({ id, ...updateData }: Partial<Problema> & { id: string }) => {
      console.log('Atualizando problema:', id, updateData);

      const { data: user } = await supabase.auth.getUser();
      if (!user.user?.id) {
        throw new Error('Usuário não autenticado');
      }

      const { data, error } = await supabase
        .from('problemas')
        .update({
          ...updateData,
          atualizado_em: new Date().toISOString(),
          atualizado_por: user.user.id,
        })
        .eq('id', id)
        .select()
        .single();

      if (error) {
        console.error('Erro ao atualizar problema:', error);
        throw error;
      }

      console.log('Problema atualizado com sucesso:', data);
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['problemas'] });
      toast.success('Problema atualizado com sucesso!');
    },
    onError: (error) => {
      console.error('Erro ao atualizar problema:', error);
      toast.error('Erro ao atualizar problema');
    },
  });

  const deleteProblema = useMutation({
    mutationFn: async (id: string) => {
      console.log('Deletando problema:', id);

      const { error } = await supabase
        .from('problemas')
        .delete()
        .eq('id', id);

      if (error) {
        console.error('Erro ao deletar problema:', error);
        throw error;
      }

      console.log('Problema deletado com sucesso');
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['problemas'] });
      toast.success('Problema deletado com sucesso!');
    },
    onError: (error) => {
      console.error('Erro ao deletar problema:', error);
      toast.error('Erro ao deletar problema');
    },
  });

  return {
    createProblema,
    updateProblema,
    deleteProblema,
  };
};
